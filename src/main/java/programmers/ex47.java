package programmers;

public class ex47 {
    public static void main(String[] args) {
        System.out.println(solution(new int[][]{{1, 4}, {3, 2}, {4, 1}}, new int[][]{{3, 3}, {3, 3}}));
        System.out.println(solution(new int[][]{{2, 3, 2}, {4, 2, 4}, {3, 1, 4}}, new int[][]{{5, 4, 3}, {2, 4, 1}, {3, 1, 1}}));
    }
    public static int[][] solution(int[][] arr1, int[][] arr2) {
        // 3행 2열
        // (0,0) => 1, (0,1) => 4
        // (1,0) => 3, (1,1) => 2
        // (2,0) => 4, (2,1) => 1

        // 2행 2열
        // (0,0) => 3, (0,1) => 3
        // (1,0) => 3, (1,1) => 3

        // 3행 2열
        // (0,0) => 1(0,0) * 3(0,0) + 4(0,1) * 3(1,0) = 15, (0,1) => 1(0,0) * 3(0,1) + 4(0,1) * 3(1,1) = 15
        // (1,0) => 3(1,0) * 3(0,0) + 2(1,1) * 3(1,0) = 15, (1,1) => 3(1,0) * 3(0,1) + 2(1,1) * 3(1,1) = 15
        // (2,0) => 4(2,0) * 3(0,0) + 1(2,1) * 3(1,0) = 15, (2,1) => 4(2,0) * 3(0,1) + 1(2,1) * 3(1,1) = 15

        int rowCnt1 = arr1.length;
        int columnCnt1 = arr1[0].length;
        int columnCnt2 = arr2[0].length;
        int[][] answer = new int[rowCnt1][columnCnt2];

        // (0,0) => 1(0,0) * 3(0,0) + 4(0,1) * 3(1,0) = 15
        // (0,1) => 1(0,0) * 3(0,1) + 4(0,1) * 3(1,1) = 15
        // (1,0) => 3(1,0) * 3(0,0) + 2(1,1) * 3(1,0) = 15
        // (1,1) => 3(1,0) * 3(0,1) + 2(1,1) * 3(1,1) = 15
        // (2,0) => 4(2,0) * 3(0,0) + 1(2,1) * 3(1,0) = 15
        // (2,1) => 4(2,0) * 3(0,1) + 1(2,1) * 3(1,1) = 15

        for (int i = 0; i < rowCnt1; i++) {
            for (int j = 0; j < columnCnt2; j++) {
                for (int k = 0; k < columnCnt1; k++) {
                    answer[i][j] += arr1[i][k] * arr2[k][j];
                }
            }
        }

        return answer;
    }
}
//행렬의 곱셈
//문제 설명
//2차원 행렬 arr1과 arr2를 입력받아, arr1에 arr2를 곱한 결과를 반환하는 함수, solution을 완성해주세요.
//
//제한 조건
//행렬 arr1, arr2의 행과 열의 길이는 2 이상 100 이하입니다.
//행렬 arr1, arr2의 원소는 -10 이상 20 이하인 자연수입니다.
//곱할 수 있는 배열만 주어집니다.
//입출력 예
//arr1	arr2	return
//[[1, 4], [3, 2], [4, 1]]	[[3, 3], [3, 3]]	[[15, 15], [15, 15], [15, 15]]
//[[2, 3, 2], [4, 2, 4], [3, 1, 4]]	[[5, 4, 3], [2, 4, 1], [3, 1, 1]]	[[22, 22, 11], [36, 28, 18], [29, 20, 14]]