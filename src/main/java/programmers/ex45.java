package programmers;

import java.util.ArrayList;
import java.util.Arrays;

public class ex45 {
    public static void main(String[] args) {
        System.out.println(solution(new int[]{7,9,1,1,4}));
    }
    public static int solution(int[] elements) {
        int answer = 0;
        // 길이 1: 7, 9, 1, 1, 4
            // e[0], e[1], e[2], e[3], e[4]
        // 길이 2: 7+9=16, 9+1=10, 1+1=2, 1+4=5, 4+7=11
            // e[0]+e[1], e[1]+e[2], e[2]+e[3], e[3]+e[4], e[4]+e[0]
        // 길이 3: 7+9+1=17, 9+1+1=11, 1+1+4=6, 1+4+7=12, 4+7+9=20
            // e[0]+e[1]+e[2], e[1]+e[2]+e[3], e[2]+e[3]+e[4], e[3]+e[4]+e[0], e[4]+e[0]+e[1]
        // 길이 4: 7+9+1+1, 9+1+1+4, 1+1+4+7, 1+4+7+9, 4+7+9+1
        // 길이 5: 7+9+1+1+4, ...
        int len = elements.length;
        int[] temp = new int[len * len];
        for (int i = 0; i < len; i++) {
            temp[i] = elements[i];
        }
        // f[0] = 7
        // f[1] = 9
        // f[2] = 1
        // f[3] = 1
        // f[4] = 4
        int tempLen = 0;
        for (int i = len; i < temp.length; i++) {
            boolean flag = false;

            if (i % len == 0) {
                tempLen += len - 1;
            }
            while (i - tempLen > len - 1) {
                tempLen += len;
                flag = true;
            }
            temp[i] = temp[i - len] + temp[i - tempLen];
            if (flag) {
                tempLen -= len;
            }
        }

        Arrays.sort(temp);
        int[] array = Arrays.stream(temp).distinct().toArray();
        answer = array.length;
        // f[5] = 7+9 = f[5-5] + f[5-4] tempLen:4
        // f[6] = 9+1 = f[6-5] + f[6-4] tempLen:4
        // f[7] = 1+1 = f[7-5] + f[7-4] tempLen:4
        // f[8] = 1+4 = f[8-5] + f[8-4] tempLen:4
        // f[9] = 4+7 = f[9-5] + f[9-9] -> 9-4 > 4 => 9-4+5 tempLen:9

        // f[10] = 7+9+1 = f[10-5] + f[10-8] -> 10 % 5 == 0 => 10-4-4 tempLen:8
        // f[11] = 9+1+1 = f[11-5] + f[11-8]
        // f[12] = 1+1+4 = f[12-5] + f[12-8]
        // f[13] = 1+4+7 = f[13-5] + f[13-13] -> 13-8 > 4 => 13-8+5
        // f[14] = 4+7+9 = f[14-5] + f[14-13] -> 14-8 > 4 => 14-8+5

        // f[15] = 7+9+1+1 = f[15-5] + f[15-12] -> 15 % 5 == 0 => 15-4-4-4
        return answer;
    }
}
//연속 부분 수열 합의 개수
//문제 설명
//철호는 수열을 가지고 놀기 좋아합니다. 어느 날 철호는 어떤 자연수로 이루어진 원형 수열의 연속하는 부분 수열의 합으로 만들 수 있는 수가 모두 몇 가지인지 알아보고 싶어졌습니다. 원형 수열이란 일반적인 수열에서 처음과 끝이 연결된 형태의 수열을 말합니다. 예를 들어 수열 [7, 9, 1, 1, 4] 로 원형 수열을 만들면 다음과 같습니다.
//그림.png
//원형 수열은 처음과 끝이 연결되어 끊기는 부분이 없기 때문에 연속하는 부분 수열도 일반적인 수열보다 많아집니다.
//원형 수열의 모든 원소 elements가 순서대로 주어질 때, 원형 수열의 연속 부분 수열 합으로 만들 수 있는 수의 개수를 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//3 ≤ elements의 길이 ≤ 1,000
//1 ≤ elements의 원소 ≤ 1,000
//입출력 예
//elements	result
//[7,9,1,1,4]	18
//입출력 예 설명
//입출력 예 #1
//길이가 1인 연속 부분 수열로부터 [1, 4, 7, 9] 네 가지의 합이 나올 수 있습니다.
//길이가 2인 연속 부분 수열로부터 [2, 5, 10, 11, 16] 다섯 가지의 합이 나올 수 있습니다.
//길이가 3인 연속 부분 수열로부터 [6, 11, 12, 17, 20] 다섯 가지의 합이 나올 수 있습니다.
//길이가 4인 연속 부분 수열로부터 [13, 15, 18, 21] 네 가지의 합이 나올 수 있습니다.
//길이가 5인 연속 부분 수열로부터 [22] 한 가지의 합이 나올 수 있습니다.
//이들 중 중복되는 값을 제외하면 다음과 같은 18가지의 수들을 얻습니다.
//[1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22]